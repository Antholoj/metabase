name: Re-run Flaky Workflows

on:
  workflow_run:
    workflows: [Run tests]
    types: [completed]
    branches: [master, 'release-x.**', 'backport-**']

jobs:
  rerun-on-failure:
    name: 'Re-run ''${{ github.event.workflow_run.name }}'' workflow'
    runs-on: ubuntu-22.04
    # Do not re-run scheduled workflow runs
    if: github.event.workflow_run.conclusion == 'failure' && github.event.workflow_run.event != 'schedule'
    env:
      BRANCH_NAME: ${{ github.event.workflow_run.head_branch }}
      AUTHOR_NAME: ${{ github.event.workflow_run.head_commit.author.name }}
    steps:
      - name: Generate job summary
        run: |
          echo "# ${{ github.event.workflow_run.name }} workflow failed! :x:" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "View the failed run attempt (#${{ github.event.workflow_run.run_attempt }}) using the following link:" >> $GITHUB_STEP_SUMMARY
          echo "${{ github.event.workflow_run.html_url }}" >> $GITHUB_STEP_SUMMARY

      - uses: actions/setup-node@v4
        with:
          node-version: lts/Jod # 22.x.x
      - run: npm install @slack/web-api
      - name: Trigger a re-run
        uses: actions/github-script@v7
        with:
          script: | # js
            const MAX_ATTEMPTS = 1;
            const ATTEMPT = "${{ github.event.workflow_run.run_attempt }}";
            const FAILED_RUN_URL = "${{ github.event.workflow_run.html_url }}";
            const FAILED_RUN_NAME = "${{ github.event.workflow_run.name }}";
            const BREAKING_COMMIT = "${{ github.event.workflow_run.head_sha }}";
            const AUTHOR = process.env.AUTHOR_NAME;
            const BRANCH = process.env.BRANCH_NAME;

            if (ATTEMPT <= MAX_ATTEMPTS) {
              github.rest.actions.reRunWorkflowFailedJobs({
                owner: context.repo.owner,
                repo: context.repo.repo,
                run_id: ${{ github.event.workflow_run.id }},
              });
            } else if (!BRANCH.includes('backport-')) {
              // notify slack of repeated failure
              const { WebClient } = require('@slack/web-api');
              const slack = new WebClient('${{ secrets.SLACK_BOT_TOKEN }}');

              // find out which jobs failed
              const { owner, repo } = context.repo;

              const jobInfo = await github.rest.actions.listJobsForWorkflowRun({
                owner,
                repo,
                run_id: ${{ github.event.workflow_run.id }},
                per_page: 100,
              });

              const failedJobs = jobInfo.data.jobs
                .filter(job => job.status === "completed" && job.conclusion === "failure" && !job.name.includes("-tests-result"));

              // don't bother slack if only the flaky job failed
              if (failedJobs.every(job => job.name.toLowerCase().includes("flaky"))) {
                return;
              }

              // Get the failing test information from the job logs
              const failedTests = await Promise.all(
                failedJobs.map(async (job) => {
                  const logs = await github.rest.actions.downloadJobLogsForWorkflowRun({
                    owner,
                    repo,
                    job_id: job.id,
                    run_id: ${{ github.event.workflow_run.id }},
                  });

                  // Extract failing test information from logs
                  // Look for both Cypress and Jest test failure patterns
                  const failurePatterns = [
                    // Cypress failure pattern
                    /Failed: (.*?)\n/g,
                    // Jest failure pattern
                    /FAIL (.*?)\n/g,
                    // Generic test failure pattern
                    /Test failed: (.*?)\n/g
                  ];

                  const failures = [];
                  for (const pattern of failurePatterns) {
                    const matches = [...logs.data.matchAll(pattern)];
                    for (const match of matches) {
                      const failingTest = match[1];
                      // Try to extract file location from the test name
                      const fileMatch = failingTest.match(/(?:at|in) (.*?):(\d+):(\d+)/);
                      if (fileMatch) {
                        failures.push({
                          testName: failingTest,
                          file: fileMatch[1],
                          line: fileMatch[2],
                          column: fileMatch[3],
                          failurePattern: pattern.toString()
                        });
                      }
                    }
                  }

                  return failures.length > 0 ? failures : null;
                })
              );

              const failedJobsList = failedJobs.map((job, index) => ({
                "type": "rich_text_section",
                "elements": [
                  {
                    "type": "link",
                    "text": job.name,
                    "url": job.html_url,
                  }
                ]
              }));

              const blocks = [
                {
                  "type": "header",
                  "text": {
                    "type": "plain_text",
                    "text": `:warning: CI is failing on ${BRANCH}`,
                    "emoji": true,
                  }
                },
                {
                  "type": "section",
                  "text": {
                    "type": "mrkdwn",
                    "text": `Commit <https://github.com/metabase/metabase/commit/${BREAKING_COMMIT}|${BREAKING_COMMIT.slice(0,7)}> by ${AUTHOR} has failing <${FAILED_RUN_URL}|${FAILED_RUN_NAME}> tests on <https://github.com/${owner}/${repo}/commits/${BRANCH}|\`${BRANCH}\`>`
                  },
                },
                {
                  "type": "rich_text",
                  "block_id": "block1",
                  "elements": [
                    {
                      "type": "rich_text_list",
                      "style": "bullet",
                      "elements": failedJobsList,
                    },
                  ],
                }
              ];

              // Add failing test information and mark as flaky button
              failedTests.forEach((tests, jobIndex) => {
                if (tests) {
                  tests.forEach((test, testIndex) => {
                    blocks.push({
                      "type": "section",
                      "text": {
                        "type": "mrkdwn",
                        "text": `*Failing Test:*\n\`${test.testName}\`\n*File:* \`${test.file}:${test.line}:${test.column}\``
                      },
                      "accessory": {
                        "type": "button",
                        "text": {
                          "type": "plain_text",
                          "text": "Mark as Flaky",
                          "emoji": true
                        },
                        "value": JSON.stringify({
                          testName: test.testName,
                          file: test.file,
                          line: test.line,
                          column: test.column,
                          jobName: failedJobs[jobIndex].name,
                          runId: ${{ github.event.workflow_run.id }},
                          branch: BRANCH,
                          failurePattern: test.failurePattern,
                          testIndex: testIndex
                        }),
                        "action_id": "mark_test_as_flaky"
                      }
                    });
                  });
                }
              });

              await slack.chat.postMessage({
                channel: 'engineering-ci',
                text: 'Failing tests',
                blocks: blocks,
              });
            }
