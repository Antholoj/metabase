import type { ConnectedProps } from "react-redux";
import { push } from "react-router-redux";

import { deletePermanently } from "metabase/archive/actions";
import { connect } from "metabase/lib/redux";
import { closeNavbar, setErrorPage } from "metabase/redux/app";
import { dismissUndo } from "metabase/redux/undo";
import { getIsNavbarOpen } from "metabase/selectors/app";
import {
  canManageSubscriptions,
  getUserIsAdmin,
} from "metabase/selectors/user";
import type { State } from "metabase-types/store";

import {
  addCardToDashboard,
  addHeadingDashCardToDashboard,
  addLinkDashCardToDashboard,
  addMarkdownDashCardToDashboard,
  cancelFetchDashboardCardData,
  closeDashboard,
  closeSidebar,
  fetchDashboard,
  fetchDashboardCardData,
  hideAddParameterPopover,
  initialize,
  moveDashboardToCollection,
  onReplaceAllDashCardVisualizationSettings,
  onUpdateDashCardColumnSettings,
  onUpdateDashCardVisualizationSettings,
  removeParameter,
  reset,
  setArchivedDashboard,
  setDashboardAttributes,
  setEditingDashboard,
  setParameterDefaultValue,
  setParameterFilteringParameters,
  setParameterIsMultiSelect,
  setParameterName,
  setParameterQueryType,
  setParameterRequired,
  setParameterSourceConfig,
  setParameterSourceType,
  setParameterTemporalUnits,
  setParameterType,
  setSharing,
  setSidebar,
  showAddParameterPopover,
  toggleSidebar,
  updateDashboardAndCards,
} from "../actions";
import {
  getClickBehaviorSidebarDashcard,
  getDashboardBeforeEditing,
  getDashboardComplete,
  getDocumentTitle,
  getFavicon,
  getIsAddParameterPopoverOpen,
  getIsAdditionalInfoVisible,
  getIsDashCardsLoadingComplete,
  getIsDashCardsRunning,
  getIsDirty,
  getIsEditing,
  getIsEditingParameter,
  getIsHeaderVisible,
  getIsNavigatingBackToDashboard,
  getIsSharing,
  getLoadingStartTime,
  getParameterValues,
  getSelectedTabId,
  getSidebar,
  getSlowCards,
} from "../selectors";

const mapStateToProps = (state: State) => ({
  canManageSubscriptions: canManageSubscriptions(state),
  isAdmin: getUserIsAdmin(state),
  isNavbarOpen: getIsNavbarOpen(state),
  isEditing: getIsEditing(state),
  isSharing: getIsSharing(state),
  dashboardBeforeEditing: getDashboardBeforeEditing(state),
  isEditingParameter: getIsEditingParameter(state),
  isDirty: getIsDirty(state),
  dashboard: getDashboardComplete(state),
  slowCards: getSlowCards(state),
  parameterValues: getParameterValues(state),
  loadingStartTime: getLoadingStartTime(state),
  clickBehaviorSidebarDashcard: getClickBehaviorSidebarDashcard(state),
  isAddParameterPopoverOpen: getIsAddParameterPopoverOpen(state),
  sidebar: getSidebar(state),
  pageFavicon: getFavicon(state),
  documentTitle: getDocumentTitle(state),
  isRunning: getIsDashCardsRunning(state),
  isLoadingComplete: getIsDashCardsLoadingComplete(state),
  isHeaderVisible: getIsHeaderVisible(state),
  isAdditionalInfoVisible: getIsAdditionalInfoVisible(state),
  selectedTabId: getSelectedTabId(state),
  isNavigatingBackToDashboard: getIsNavigatingBackToDashboard(state),
});

const mapDispatchToProps = {
  initialize,
  cancelFetchDashboardCardData,
  addCardToDashboard,
  addHeadingDashCardToDashboard,
  addMarkdownDashCardToDashboard,
  addLinkDashCardToDashboard,
  setEditingDashboard,
  setDashboardAttributes,
  setSharing,
  toggleSidebar,
  closeSidebar,
  closeNavbar,
  setErrorPage,
  setParameterName,
  setParameterType,
  setParameterDefaultValue,
  setParameterRequired,
  setParameterTemporalUnits,
  setParameterIsMultiSelect,
  setParameterQueryType,
  setParameterSourceType,
  setParameterSourceConfig,
  setParameterFilteringParameters,
  showAddParameterPopover,
  removeParameter,
  onReplaceAllDashCardVisualizationSettings,
  onUpdateDashCardVisualizationSettings,
  onUpdateDashCardColumnSettings,
  updateDashboardAndCards,
  setSidebar,
  hideAddParameterPopover,
  fetchDashboard,
  fetchDashboardCardData,
  onChangeLocation: push,
  reset,
  closeDashboard,
  dismissUndo,
  setArchivedDashboard,
  moveDashboardToCollection,
  deletePermanently,
};

export const connector = connect(mapStateToProps, mapDispatchToProps);
export type ReduxProps = ConnectedProps<typeof connector>;
